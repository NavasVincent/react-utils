{"ast":null,"code":"export const setLSData = (key, value) => {\n  try {\n    const data = typeof value === \"object\" ? JSON.stringify(value) : value;\n    localStorage.setItem(key, data);\n  } catch (error) {\n    console.error(`Error saving to localStorage: ${error}`);\n  }\n};\nexport const getLSData = (key, defaultValue = null) => {\n  try {\n    const item = localStorage.getItem(key);\n    if (item === null) return defaultValue;\n\n    // ✅ Check if item is JSON before parsing\n    if (item.startsWith(\"{\") || item.startsWith(\"[\")) {\n      return JSON.parse(item);\n    }\n    return item; // Return as a string if it's not JSON\n  } catch (error) {\n    console.warn(`Error parsing localStorage key \"${key}\": ${error}`);\n    return defaultValue;\n  }\n};\nexport const removeLSData = key => {\n  try {\n    localStorage.removeItem(key);\n  } catch (error) {\n    console.error(`Error removing localStorage key \"${key}\": ${error}`);\n  }\n};\nexport const clearLS = () => {\n  try {\n    localStorage.clear();\n  } catch (error) {\n    console.error(`Error clearing localStorage: ${error}`);\n  }\n};","map":{"version":3,"names":["setLSData","key","value","data","JSON","stringify","localStorage","setItem","error","console","getLSData","defaultValue","item","getItem","startsWith","parse","warn","removeLSData","removeItem","clearLS","clear"],"sources":["/Users/user01/Project/react-utils/src/utils/localStorageUtils.js"],"sourcesContent":["export const setLSData = (key, value) => {\n  try {\n    const data = typeof value === \"object\" ? JSON.stringify(value) : value;\n    localStorage.setItem(key, data);\n  } catch (error) {\n    console.error(`Error saving to localStorage: ${error}`);\n  }\n};\n\nexport const getLSData = (key, defaultValue = null) => {\n  try {\n    const item = localStorage.getItem(key);\n    if (item === null) return defaultValue;\n\n    // ✅ Check if item is JSON before parsing\n    if (item.startsWith(\"{\") || item.startsWith(\"[\")) {\n      return JSON.parse(item);\n    }\n\n    return item; // Return as a string if it's not JSON\n  } catch (error) {\n    console.warn(`Error parsing localStorage key \"${key}\": ${error}`);\n    return defaultValue;\n  }\n};\n\n\nexport const removeLSData = (key) => {\n  try {\n    localStorage.removeItem(key);\n  } catch (error) {\n    console.error(`Error removing localStorage key \"${key}\": ${error}`);\n  }\n};\n\nexport const clearLS = () => {\n  try {\n    localStorage.clear();\n  } catch (error) {\n    console.error(`Error clearing localStorage: ${error}`);\n  }\n};\n"],"mappings":"AAAA,OAAO,MAAMA,SAAS,GAAGA,CAACC,GAAG,EAAEC,KAAK,KAAK;EACvC,IAAI;IACF,MAAMC,IAAI,GAAG,OAAOD,KAAK,KAAK,QAAQ,GAAGE,IAAI,CAACC,SAAS,CAACH,KAAK,CAAC,GAAGA,KAAK;IACtEI,YAAY,CAACC,OAAO,CAACN,GAAG,EAAEE,IAAI,CAAC;EACjC,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,iCAAiCA,KAAK,EAAE,CAAC;EACzD;AACF,CAAC;AAED,OAAO,MAAME,SAAS,GAAGA,CAACT,GAAG,EAAEU,YAAY,GAAG,IAAI,KAAK;EACrD,IAAI;IACF,MAAMC,IAAI,GAAGN,YAAY,CAACO,OAAO,CAACZ,GAAG,CAAC;IACtC,IAAIW,IAAI,KAAK,IAAI,EAAE,OAAOD,YAAY;;IAEtC;IACA,IAAIC,IAAI,CAACE,UAAU,CAAC,GAAG,CAAC,IAAIF,IAAI,CAACE,UAAU,CAAC,GAAG,CAAC,EAAE;MAChD,OAAOV,IAAI,CAACW,KAAK,CAACH,IAAI,CAAC;IACzB;IAEA,OAAOA,IAAI,CAAC,CAAC;EACf,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACdC,OAAO,CAACO,IAAI,CAAC,mCAAmCf,GAAG,MAAMO,KAAK,EAAE,CAAC;IACjE,OAAOG,YAAY;EACrB;AACF,CAAC;AAGD,OAAO,MAAMM,YAAY,GAAIhB,GAAG,IAAK;EACnC,IAAI;IACFK,YAAY,CAACY,UAAU,CAACjB,GAAG,CAAC;EAC9B,CAAC,CAAC,OAAOO,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,oCAAoCP,GAAG,MAAMO,KAAK,EAAE,CAAC;EACrE;AACF,CAAC;AAED,OAAO,MAAMW,OAAO,GAAGA,CAAA,KAAM;EAC3B,IAAI;IACFb,YAAY,CAACc,KAAK,CAAC,CAAC;EACtB,CAAC,CAAC,OAAOZ,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,gCAAgCA,KAAK,EAAE,CAAC;EACxD;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}